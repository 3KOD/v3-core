# (Pair owner { Elt 500 10; Elt 3000 60; Elt 10000 200 } { })
{
  storage (pair (address %owner) (big_map %feeAmountTickSpacing nat int) (big_map %getPool (pair address address nat) address));
  parameter (or (or (pair %createPool (address %tokenA) (pair (address %tokenB) (nat %fee_))) (address %setOwner)) (pair %enableFeeAmount (nat %fee_) (int %tickSpacing_)));
  code { LAMBDA
           unit
           bool
           { PUSH unit Unit;
             SELF_ADDRESS;
             SELF_ADDRESS;
             COMPARE;
             NEQ;
             IF
               { SELF_ADDRESS;
                 PUSH string "DelegateCall";
                 PAIR;
                 FAILWITH }
               {  };
             PUSH bool True;
             SWAP;
             DROP;
             SWAP;
             DROP };
         LAMBDA
           int
           nat
           { PUSH unit Unit;
             DUP 2;
             DUP 3;
             PUSH int -887272;
             EDIV;
             IF_NONE
               { PUSH string "DivByZero";
                 FAILWITH }
               { DUP;
                 CAR;
                 SWAP;
                 DROP };
             MUL;
             DUP 3;
             DUP 4;
             PUSH int 887272;
             EDIV;
             IF_NONE
               { PUSH string "DivByZero";
                 FAILWITH }
               { DUP;
                 CAR;
                 SWAP;
                 DROP };
             MUL;
             PUSH int 1;
             DUP 5;
             DUP 4;
             DUP 4;
             SUB;
             EDIV;
             IF_NONE
               { PUSH string "DivByZero";
                 FAILWITH }
               { DUP;
                 CAR;
                 SWAP;
                 DROP };
             ADD;
             DUP;
             PUSH int 1;
             PUSH nat 128;
             PUSH nat 1;
             LSL;
             INT;
             SUB;
             EDIV;
             IF_NONE
               { PUSH string "DivByZero";
                 FAILWITH }
               { DUP;
                 CAR;
                 SWAP;
                 DROP };
             ISNAT;
             IF_NONE
               { PUSH nat 0 }
               {  };
             DUP;
             DIP { DIG 4; DROP };
             DUG 4;
             DROP 4;
             DUG 1;
             DROP };
         NIL operation;
         DIG 3;
         UNPAIR;
         DIP { UNPAIR 3 };
         IF_LEFT
           { IF_LEFT
               { UNPAIR;
                 SWAP;
                 UNPAIR;
                 SWAP;
                 DUP 9;
                 UNIT;
                 EXEC;
                 NOT;
                 IF
                   { PUSH string "createPool1";
                     PUSH string "INVALID_CONDITION";
                     PAIR;
                     FAILWITH }
                   {  };
                 DUP 2;
                 DUP 4;
                 COMPARE;
                 NEQ;
                 NOT;
                 IF
                   { PUSH string "createPool2";
                     PUSH string "INVALID_CONDITION";
                     PAIR;
                     FAILWITH }
                   {  };
                 DUP 2;
                 DUP 4;
                 COMPARE;
                 LT;
                 IF
                   { DUP 3 }
                   { DUP 2 };
                 DUP 3;
                 DUP 5;
                 COMPARE;
                 LT;
                 IF
                   { DUP 3 }
                   { DUP 4 };
                 DUP 7;
                 DUP 4;
                 GET;
                 IF_NONE
                   { PUSH string "feeAmountTickSpacing";
                     PUSH string "ASSET_NOT_FOUND";
                     PAIR;
                     FAILWITH }
                   {  };
                 PUSH int 0;
                 DUP 2;
                 COMPARE;
                 NEQ;
                 NOT;
                 IF
                   { DUP;
                     PUSH string "INVALID_TICK_SPACING";
                     PAIR;
                     FAILWITH }
                   {  };
                 DUP 9;
                 DUP 5;
                 DUP 4;
                 PAIR;
                 DUP 5;
                 PAIR;
                 GET;
                 IF_NONE
                   { NONE address }
                   { DUP;
                     SOME;
                     SWAP;
                     DROP };
                 IF_NONE
                   { PUSH bool True }
                   { PUSH bool False;
                     SWAP;
                     DROP };
                 NOT;
                 IF
                   { DUP 9;
                     DUP 5;
                     DUP 4;
                     PAIR;
                     DUP 5;
                     PAIR;
                     GET;
                     IF_NONE
                       { PUSH string "getPool";
                         PUSH string "ASSET_NOT_FOUND";
                         PAIR;
                         FAILWITH }
                       {  };
                     PUSH string "INVALID_GET_POOL";
                     PAIR;
                     FAILWITH }
                   {  };
                 PUSH mutez 0;
                 DUP 12;
                 DUP 3;
                 EXEC;
                 PUSH bool False;
                 PUSH nat 0;
                 PAIR;
                 PUSH nat 0;
                 PAIR;
                 PUSH nat 0;
                 PAIR;
                 PUSH nat 0;
                 PAIR;
                 PUSH int 0;
                 PAIR;
                 PUSH nat 0;
                 PAIR;
                 NIL (pair nat int nat bool);
                 EMPTY_BIG_MAP bytes (pair nat (pair nat nat) nat nat);
                 PAIR;
                 EMPTY_BIG_MAP int nat;
                 PAIR;
                 EMPTY_BIG_MAP int (pair nat int nat nat int nat nat bool);
                 PAIR;
                 PUSH nat 0;
                 PAIR;
                 PUSH nat 0;
                 PUSH nat 0;
                 PAIR;
                 PAIR;
                 PUSH nat 0;
                 PAIR;
                 PUSH nat 0;
                 PAIR;
                 DUP 2;
                 PAIR;
                 DUP 3;
                 PAIR;
                 DUP 5;
                 PAIR;
                 DUP 8;
                 PAIR;
                 DUP 6;
                 PAIR;
                 DUP 7;
                 PAIR;
                 SELF_ADDRESS;
                 PAIR;
                 DUP;
                 DUP 5;
                 NONE key_hash;
                 CREATE_CONTRACT
                   { storage
                       (pair (address %factory)
                             (address %token0)
                             (address %token1)
                             (nat %fee)
                             (int %tickSpacing)
                             (nat %maxLiquidityPerTick)
                             (pair %slot0
                                (nat %sqrtPriceX96)
                                (int %tick)
                                (nat %observationIndex)
                                (nat %observationCardinality)
                                (nat %observationCardinalityNext)
                                (nat %feeProtocol)
                                (bool %unlocked))
                             (nat %feeGrowthGlobal0X128)
                             (nat %feeGrowthGlobal1X128)
                             (pair %protocolFees (nat %token0) (nat %token1))
                             (nat %liquidity)
                             (big_map %ticks
                                int
                                (pair (nat %liquidityGross)
                                      (int %liquidityNet)
                                      (nat %feeGrowthOutside0X128)
                                      (nat %feeGrowthOutside1X128)
                                      (int %tickCumulativeOutside)
                                      (nat %secondsPerLiquidityOutsideX128)
                                      (nat %secondsOutside)
                                      (bool %initialized)))
                             (big_map %tickBitmap int nat)
                             (big_map %positions
                                bytes
                                (pair (nat %liquidity)
                                      (pair (nat %feeGrowthInside0LastX128) (nat %feeGrowthInside1LastX128))
                                      (pair (nat %tokensOwed0) (nat %tokensOwed1))))
                             (list %observations
                                (pair (nat %blockTimestamp)
                                      (int %tickCumulative)
                                      (nat %secondsPerLiquidityCumulativeX128)
                                      (bool %initialized)))) ;
                     parameter unit ;
                     code { LAMBDA
                              unit
                              bool
                              { PUSH unit Unit ;
                                SELF_ADDRESS ;
                                SELF_ADDRESS ;
                                COMPARE ;
                                NEQ ;
                                IF { SELF_ADDRESS ; PUSH string "DelegateCall" ; PAIR ; FAILWITH } {} ;
                                PUSH bool True ;
                                SWAP ;
                                DROP ;
                                SWAP ;
                                DROP } ;
                            DIG 1 ;
                            CDR ;
                            NIL operation ;
                            PAIR ;
                            DIP { DROP } } };
                 PAIR;
                 NIL operation;
                 DUP 2;
                 CAR;
                 CONS;
                 DIP { DIG 14; DROP };
                 DUG 14;
                 DUP 14;
                 DUP 2;
                 CDR;
                 SOME;
                 DUP 11;
                 DUP 10;
                 PAIR;
                 DUP 11;
                 PAIR;
                 UPDATE;
                 DIP { DIG 13; DROP };
                 DUG 13;
                 DUP 14;
                 DUP 2;
                 CDR;
                 SOME;
                 DUP 11;
                 DUP 11;
                 PAIR;
                 DUP 10;
                 PAIR;
                 UPDATE;
                 DIP { DIG 13; DROP };
                 DUG 13;
                 NIL operation;
                 NIL operation;
                 DUP 17;
                 ITER { CONS };
                 DUP 3;
                 CDR;
                 DUP 9;
                 PAIR;
                 DUP 12;
                 PAIR;
                 DUP 10;
                 PAIR;
                 DUP 11;
                 PAIR;
                 EMIT %PoolCreated (pair (address %token0) (address %token1) (nat %fee) (int %tickSpacing) (address %pool));
                 CONS;
                 ITER { CONS };
                 DIP { DIG 14; DROP };
                 DUG 14;
                 DROP 11;
                 PAIR 3;
                 DIG 1;
                 PAIR }
               { DUP 2;
                 SENDER;
                 COMPARE;
                 EQ;
                 NOT;
                 IF
                   { PUSH string "INVALID_CALLER";
                     FAILWITH }
                   {  };
                 NIL operation;
                 NIL operation;
                 DUP 7;
                 ITER { CONS };
                 DUP 3;
                 DUP 5;
                 PAIR;
                 EMIT %OwnerChanged (pair (address %oldOwner) (address %newOwner));
                 CONS;
                 ITER { CONS };
                 DIP { DIG 4; DROP };
                 DUG 4;
                 DUP;
                 DIP { DIG 1; DROP };
                 DUG 1;
                 DROP;
                 PAIR 3;
                 DIG 1;
                 PAIR } }
           { UNPAIR;
             SWAP;
             DUP 3;
             SENDER;
             COMPARE;
             EQ;
             NOT;
             IF
               { PUSH string "INVALID_CALLER";
                 FAILWITH }
               {  };
             PUSH nat 1000000;
             DUP 3;
             COMPARE;
             LT;
             NOT;
             IF
               { PUSH string "enableFeeAmount1";
                 PUSH string "INVALID_CONDITION";
                 PAIR;
                 FAILWITH }
               {  };
             PUSH int 0;
             DUP 2;
             COMPARE;
             GT;
             NOT;
             IF
               { PUSH string "enableFeeAmount2";
                 PUSH string "INVALID_CONDITION";
                 PAIR;
                 FAILWITH }
               {  };
             PUSH int 16384;
             DUP 2;
             COMPARE;
             LT;
             NOT;
             IF
               { PUSH string "enableFeeAmount3";
                 PUSH string "INVALID_CONDITION";
                 PAIR;
                 FAILWITH }
               {  };
             DUP 4;
             DUP 3;
             GET;
             IF_NONE
               { NONE int }
               { DUP;
                 SOME;
                 SWAP;
                 DROP };
             IF_NONE
               { PUSH bool True }
               { PUSH bool False;
                 SWAP;
                 DROP };
             NOT;
             IF
               { PUSH string "enableFeeAmount4";
                 PUSH string "INVALID_CONDITION";
                 PAIR;
                 FAILWITH }
               {  };
             DUP 4;
             DUP 3;
             MEM;
             IF
               { DUP 4;
                 DUP 2;
                 SOME;
                 DUP 4;
                 UPDATE;
                 DIP { DIG 3; DROP };
                 DUG 3 }
               { DUP 4;
                 DUP 2;
                 SOME;
                 DUP 4;
                 UPDATE;
                 DIP { DIG 3; DROP };
                 DUG 3 };
             NIL operation;
             NIL operation;
             DUP 8;
             ITER { CONS };
             DUP 3;
             DUP 5;
             PAIR;
             EMIT %FeeAmountEnabled (pair (nat %fee) (int %tickSpacing));
             CONS;
             ITER { CONS };
             DIP { DIG 5; DROP };
             DUG 5;
             DROP 2;
             PAIR 3;
             DIG 1;
             PAIR };
         DIP { DROP 2 } };
  view
    "getOwner"
    unit
    address
    { CDR;
      UNPAIR;
      SWAP;
      DROP;
      UNIT;
      DUP 2;
      SWAP;
      DROP;
      DIP { DROP } }
}
