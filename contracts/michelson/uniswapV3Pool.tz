# (Pair factory token0 token1 0 0 0 (Pair 0 0 0 0 0 0 False) 0 0 (Pair 0 0) 0 { } { } { } { })
{
  storage (pair (address %factory) (address %token0) (address %token1) (nat %fee) (int %tickSpacing) (nat %maxLiquidityPerTick) (pair %slot0 (nat %sqrtPriceX96) (int %tick) (nat %observationIndex) (nat %observationCardinality) (nat %observationCardinalityNext) (nat %feeProtocol) (bool %unlocked)) (nat %feeGrowthGlobal0X128) (nat %feeGrowthGlobal1X128) (pair %protocolFees (nat %token0) (nat %token1)) (nat %liquidity) (big_map %ticks int (pair (nat %liquidityGross) (int %liquidityNet) (nat %feeGrowthOutside0X128) (nat %feeGrowthOutside1X128) (int %tickCumulativeOutside) (nat %secondsPerLiquidityOutsideX128) (nat %secondsOutside) (bool %initialized))) (big_map %tickBitmap int nat) (big_map %positions bytes (pair (nat %liquidity) (pair (nat %feeGrowthInside0LastX128) (nat %feeGrowthInside1LastX128)) (pair (nat %tokensOwed0) (nat %tokensOwed1)))) (list %observations (pair (nat %blockTimestamp) (int %tickCumulative) (nat %secondsPerLiquidityCumulativeX128) (bool %initialized))));
  parameter unit;
  code { LAMBDA
           unit
           bool
           { PUSH unit Unit;
             SELF_ADDRESS;
             SELF_ADDRESS;
             COMPARE;
             NEQ;
             IF
               { SELF_ADDRESS;
                 PUSH string "DelegateCall";
                 PAIR;
                 FAILWITH }
               {  };
             PUSH bool True;
             SWAP;
             DROP;
             SWAP;
             DROP };
         LAMBDA
           address
           bool
           { PUSH unit Unit;
             DUP 2;
             PUSH unit Unit;
             VIEW "getOwner" address;
             IF_NONE
               { PUSH string "VIEW_OWNER_ERR";
                 FAILWITH }
               {  };
             DUP;
             SENDER;
             COMPARE;
             EQ;
             NOT;
             IF
               { PUSH string "ONLY_FACTORY_OWNER_ERR";
                 FAILWITH }
               {  };
             PUSH bool True;
             DIP { DIG 1; DROP };
             DUG 1;
             DROP;
             DUG 1;
             DROP };
         LAMBDA
           (pair int int)
           bool
           { UNPAIR 2;
             PUSH unit Unit;
             DUP 3;
             DUP 3;
             COMPARE;
             LT;
             NOT;
             IF
               { PUSH string "TLU";
                 FAILWITH }
               {  };
             PUSH int -887272;
             DUP 3;
             COMPARE;
             GE;
             NOT;
             IF
               { PUSH string "TLM";
                 FAILWITH }
               {  };
             PUSH int 887272;
             DUP 4;
             COMPARE;
             LE;
             NOT;
             IF
               { PUSH string "TUM";
                 FAILWITH }
               {  };
             PUSH bool True;
             SWAP;
             DROP;
             DUG 2;
             DROP 2 };
         DIG 3;
         CDR;
         NIL operation;
         PAIR;
         DIP { DROP 3 } };
  view
    "blockTimestamp_"
    unit
    timestamp
    { DROP;
      UNIT;
      NOW;
      SWAP;
      DROP }
}

