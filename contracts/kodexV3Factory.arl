// owner = caller
archetype kodexV3Factory(owner: address, kodexV3lib: address)

import kodexV3Pool from "./contracts/michelson/kodexV3Pool.tz"

constant INVALID_OPERATION: string = "ERR"
constant MIN_TICK: int = -887272
constant MAX_TICK: int = -MIN_TICK
constant Q128: nat = 1 <<| 128
constant original: address = self_address

event OwnerChanged {
    oldOwner: address;
    newOwner: address
}

event PoolCreated {
    token0: address;
    token1: address;
    fee: nat;
    tickSpacing: int;
    pool: address
}

event FeeAmountEnabled {
    fee: nat;
    tickSpacing: int
}

/// @inheritdoc IkodexV3Factory
asset feeAmountTickSpacing identified by fee to big_map {
    fee : nat;
    tickSpacing : int = 0;
} initialized by {
    { fee = 500; tickSpacing = 10 };
    { fee = 3000; tickSpacing = 60 };
    { fee = 10000; tickSpacing = 200 }
}

asset getPool identified by token0 token1 feeOfGetPool to big_map {
    token0: address;
    token1: address;
    feeOfGetPool: nat;
    pool: address;
}

record Parameters {
    para_factory: address;
    para_token0: address;
    para_token1: address;
    para_fee: nat;
    para_tickSpacing: int;
}

entry createPool(tokenA: address, tokenB: address, fee_: nat) {
    do_require(self_address = original, "DCall");
    do_require(tokenA <> tokenB, INVALID_OPERATION);
    var token0_cp = tokenA < tokenB ? tokenA : tokenB;
    var token1_cp = tokenA < tokenB ? tokenB : tokenA;
    // do_require(token0_cp <> none, ("INVALID_ADDRESS", token0_cp));
    var tickSpacing_cp = feeAmountTickSpacing[fee_].tickSpacing;
    do_require(tickSpacing_cp <> 0, "INVALID_TICK_SPACING");
    do_require(is_none(getPool[(token0_cp, token1_cp, fee_)]?.pool), "INVALID_GET_POOL");

    // /// Deploys a pool with the given parameters by transiently setting the parameters storage slot and then
    // /// clearing it after deploying the pool.
    const amount : tez = 0tz;
    const maxLiquidityPerTick : nat ?= call_view<nat>(kodexV3lib, "tickSpacingToMaxLpPerTick", tickSpacing_cp) : INVALID_OPERATION;
    const slot0 : (nat * int * nat * nat * nat * nat * bool) = (0, 0, 0, 0, 0, 0, false);

    const storage_init : 
    (
        address * address * address * address * string * nat * int * nat * nat * nat * 
        (nat * int * nat * nat * nat * nat * bool) * 
        nat * nat * 
        (nat * nat) * nat * 
        (big_map<int, (nat * int * nat * nat * int * nat * nat * bool)>) * 
        (big_map<int, nat>) * 
        (big_map<(address * int * int), (nat * (nat * nat) * nat * nat)>) * 
        (big_map<nat, (nat * int * nat * bool)>)
    ) = 
        (self_address, token0_cp, token1_cp, kodexV3lib, INVALID_OPERATION, fee_, tickSpacing_cp, maxLiquidityPerTick, 0, 0, slot0, 0, 0, (0, 0), 0, [], [], [], []);
    const op_addr : (operation * address) = create_contract(kodexV3Pool, none, amount, storage_init);
    operations := [op_addr[0]];

    getPool[(token0_cp, token1_cp, fee_)].pool := op_addr[1];
    getPool[(token1_cp, token0_cp, fee_)].pool := op_addr[1];
    emit<PoolCreated>({token0_cp; token1_cp; fee_; tickSpacing_cp; op_addr[1]})
}

entry setOwner(owner_: address) {
    called by owner

    effect {
        emit<OwnerChanged>({owner; owner_});
        owner := owner_
    }
}

entry enableFeeAmount(fee_: nat, tickSpacing_: int) {
    called by owner

    require {
        enableFeeAmount1: fee_ < 1000000;
        enableFeeAmount2: tickSpacing_ > 0;
        enableFeeAmount3: tickSpacing_ < 16384;
        enableFeeAmount4: is_none(feeAmountTickSpacing[fee_]?.tickSpacing);
    }

    effect {
        feeAmountTickSpacing.add_update(fee_, { tickSpacing := tickSpacing_ });
        emit<FeeAmountEnabled>({fee_; tickSpacing_})
    }
}

view getOwner(): address {
    return owner
}

view computeAddress(token0_param: address, token1_param: address, feeOfGetPool_param: nat): address {
    return getPool[(token0_param, token1_param, feeOfGetPool_param)].pool
}
